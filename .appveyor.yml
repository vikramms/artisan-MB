###################################################################
# Appveyor CI configuration to build Artisan install packages
#     for Windows, Windows legacy, macOS, and Linux
###################################################################
# Include "skip ci" in the commit message to prevent this build process from running
#
environment:
  # Set the Appveyor Python version for windows, macos and linux here. Does not affect windows_legacy.
  PYTHON_V: 3.11
  # Upgrade to specific version (for platforms supporting upgrade). Upgrade skipped if missing or blank.
#  PYUPGRADE_V: 3.11.3

  matrix:
  ###- job_name: windows_legacy
  ###  appveyor_build_worker_image: Visual Studio 2019
  - job_name: windows
    appveyor_build_worker_image: Visual Studio 2022
  - job_name: macos
    appveyor_build_worker_image: macos-bigsur
  ###- job_name: linux
  ###  appveyor_build_worker_image: Ubuntu2004


# Generic build number, later set to commit hash by init
version: '{build}'

# Do not build on tags
skip_tags: true
clone_depth: 1

init:
  # Sets the commit hash to "build version number" shown in appveyor build status, the build number keeps it unique
  - ps: Update-AppveyorBuild -Version "$($env:APPVEYOR_REPO_COMMIT.substring(0,7)) ($env:APPVEYOR_BUILD_NUMBER)"

branches:
  only:
    - master

stack:
  python ${PYTHON_V}

for:
-
  matrix:
    only:
      - job_name: windows_legacy
    fast_finish: false

  environment:
    PYTHON_PATH: "C:\\Python38-x64"
    QT_PATH: "c:\\qt\\5.15\\msvc2019_64"
    PYUIC: "pyuic5.exe"
    BUILD_PYINSTALLER: "True"
    ARTISAN_LEGACY: "True"
    VC_REDIST: "https://aka.ms/vs/16/release/vc_redist.x64.exe"

  install:
    - cmd: echo Windows Legacy Install

    # pull library versions from requirments file
    - ps: $env:PYINSTALLER_VER = Select-String -Path ./src/requirements-win-legacy.txt 'pyinstaller==([\d\.]*)' -List | ForEach-Object {$_.Matches.Groups[1].Value}
    - ps: $env:LIBUSB_VER = Select-String -Path ./src/requirements-win-legacy.txt 'libusb==([\d\.]*)' -List | ForEach-Object {$_.Matches.Groups[1].Value}

    # update path env var
    - cmd: set PATH=%PYTHON_PATH%;%PYTHON_PATH%\Scripts;%PATH%

    # run the install script
    - cmd: .ci\install-win.bat LEGACY

  build_script:
    - cmd: echo Windows Legacy Build
    - cmd: cd src

    #update the copyright year used by pyinstaller to set exe properties for Windows
    - ps: $YEAR=(Get-Date).year
    - ps: gc version-metadata.yml | %{ $_ -replace "yyyy", "$YEAR" } | out-file newfile -encoding ascii
    - ps: move -force newfile version-metadata.yml

    # update the __revision__ field with the left seven of the GIT commit hash
    - ps: $GIT_VERSION=git rev-parse --verify --short HEAD
    - ps: gc artisanlib/__init__.py | %{ $_ -replace "__revision__ = '0'", "__revision__ = '$GIT_VERSION'" } | out-file newfile -encoding ascii
    - ps: move -force newfile artisanlib/__init__.py

    # run the build script
    - cmd: build-win3-pi.bat LEGACY

#  test_script:
#    - cmd: python -m unittest discover

#  artifacts:
#    - path: 'src\artisan-*.zip'

  deploy_script:
    - cmd: bash ../.ci/upload.sh artisan-*.zip

-
  matrix:
    only:
      - job_name: windows
    fast_finish: false

  environment:
    QT_PATH: "C:/qt/6.5.1/msvc2019_64"  #there is no msvc2022_64 under /qt*
    PYQT: "6"
    ###QT_PATH: "C:\\qt\\6.4\\msvc2022_64"
    PYUIC: "pyuic6.exe"
    BUILD_PYINSTALLER: "True"
    ARTISAN_LEGACY: "False"
    VC_REDIST: "https://aka.ms/vs/17/release/vc_redist.x64.exe"  #redistributable for VS 2015-2022

  install:
    - cmd: echo Windows Install

    # derive the python path from the version number
    - ps: $env:PYTHON_PATH = "C:\\Python$($env:PYTHON_V -replace '\.','')-x64"
    - ps: Write-Host $env:PYTHON_PATH

    # pull library versions from requirments file
    - ps: $env:PYINSTALLER_VER = Select-String -Path ./src/requirements-win.txt 'pyinstaller==([\d\.]*)' -List | ForEach-Object {$_.Matches.Groups[1].Value}
    - ps: $env:LIBUSB_VER = Select-String -Path ./src/requirements-win.txt 'libusb==([\d\.]*)' -List | ForEach-Object {$_.Matches.Groups[1].Value}

    # update path env var
    - cmd: set PATH=%PYTHON_PATH%;%PYTHON_PATH%\Scripts;%PATH%

    # run the install script
    - cmd: .ci\install-win.bat

  build_script:
    - cmd: echo Windows Build
    - cmd: cd src

    #update the copyright year used by pyinstaller to set exe properties for Windows
    - ps: $YEAR=(Get-Date).year
    - ps: gc version-metadata.yml | %{ $_ -replace "yyyy", "$YEAR" } | out-file newfile -encoding ascii
    - ps: move -force newfile version-metadata.yml

    # update the __revision__ field with the left seven of the GIT commit hash
    - ps: $GIT_VERSION=git rev-parse --verify --short HEAD
    - ps: gc artisanlib/__init__.py | %{ $_ -replace "__revision__ = '0'", "__revision__ = '$GIT_VERSION'" } | out-file newfile -encoding ascii
    - ps: move -force newfile artisanlib/__init__.py

    # run the build script
    - cmd: build-win3-pi.bat

#  test_script:
#    - cmd: python -m unittest discover

#  artifacts:
#    - path: 'src\artisan-*.zip'

  deploy_script:
    - cmd: bash ../.ci/upload.sh artisan-*.zip


-
  matrix:
    only:
      - job_name: macos
    fast_finish: false

  environment:
    ARTISAN_OS: macos
    MACOSX_DEPLOYMENT_TARGET: 11.0
    PYTHONSITEPKGS: /Users/appveyor/venv${PYTHON_V}/lib/python${PYTHON_V}/site-packages
    QT_PATH: ${PYTHONSITEPKGS}/PyQt6/Qt6
    PYUIC: pyuic6
    PYRCC: pyrcc6
    PYLUPDATE: ./pylupdate6pro  #the dot slash is necessary

  install:
    - echo "MacOS Install"
    - chmod +x .ci/*.sh

    # update the __revision__ field with the left seven of the GIT commit hash
    - export GIT_VERSION=`git rev-parse --verify --short HEAD 2>/dev/null|| echo "???"`
    - sed -i'' -e "s/__revision__ = '0'/__revision__ = '$GIT_VERSION'/" src/artisanlib/__init__.py

    # run the install script
    - .ci/install-macos.sh
    - export PATH=/Users/appveyor/venv${PYTHON_V}/bin:${PATH} # required after updating Python in venv

  build_script:
    - echo "MacOS Build"
    - chmod +x src/*.sh
    - chmod +x src/pylupdate6pro

    # run the build script
    - cd src
    - ./build-macos3.sh

# unit test fails as it runs on Py3.9 while the build installs under brew installed Py3.10 (see build-mac3.py)
#  test_script:
#    - python -m unittest discover -s src

#  artifacts:
#    - path: 'src/artisan-*.dmg'

  deploy_script:
    - ../.ci/upload.sh artisan-*.dmg


-
  matrix:
    only:
      - job_name: linux
    fast_finish: false

  environment:
    ARTISAN_OS: linux
    PYTHON_PATH: /home/appveyor/venv${PYTHON_V}/lib/python${PYTHON_V}/site-packages
    QT_PATH: $PYTHON_PATH/PyQt6/Qt6

  install:
    - echo "Linux Install"
    - chmod +x .ci/*.sh

    # pull library versions from requirments file
    - ps: $env:LIBUSB_VER = Select-String -Path ./src/requirements-linux.txt 'libusb==([\d\.]*)' -List | ForEach-Object {$_.Matches.Groups[1].Value}

    # update the __revision__ field with the left seven of the GIT commit hash
    - export GIT_VERSION=`git rev-parse --verify --short HEAD 2>/dev/null|| echo "???"`
    - sed -i'' -e "s/__revision__ = '0'/__revision__ = '$GIT_VERSION'/" src/artisanlib/__init__.py

    # run the install script
    - .ci/install-linux.sh

  build_script:
    - echo "Linux Build"
    - chmod +x src/*.sh
    - cd src

    # run the build scripts
    - ./build-linux.sh
    - ./build-linux-pkg.sh

#  test_script:
#    - QT_QPA_PLATFORM=offscreen python -m unittest discover -s src

#  artifacts:
#    - path: 'src/artisan-*.deb'
#    - path: 'src/artisan-*.rpm'
#    - path: 'src/artisan-*.AppImage'

  deploy_script:
    - ../.ci/upload.sh artisan-*.deb
    - ../.ci/upload.sh artisan-*.rpm
    - ../.ci/upload.sh artisan-*.AppImage
